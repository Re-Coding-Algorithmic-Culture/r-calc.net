<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg width="100%" height="100%" viewBox="0 0 32 32" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xml:space="preserve" xmlns:serif="http://www.serif.com/" style="fill-rule:evenodd;clip-rule:evenodd;stroke-linejoin:round;stroke-miterlimit:2;">
<metadata>
<rdf:RDF xmlns:cc="http://web.resource.org/cc/" xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#" xmlns:dc="http://purl.org/dc/elements/1.1/">

     <rdf:Description rdf:about="">
       <dc:title>Mutant Standard emoji 2020.04</dc:title>
     </rdf:Description>

    <cc:work rdf:about="">
        <cc:license rdf:resource="http://creativecommons.org/licenses/by-nc-sa/4.0/"/>
        <cc:attributionName>Dzuk</cc:attributionName>
        <cc:attributionURL>http://mutant.tech/</cc:attributionURL>
    </cc:work>

</rdf:RDF>
</metadata>

    <rect id="nail_polish--clw-" serif:id="nail_polish [clw]" x="0" y="0" width="32" height="32" style="fill:none;"/>
    <clipPath id="_clip1">
        <rect x="0" y="0" width="32" height="32"/>
    </clipPath>
    <g clip-path="url(#_clip1)">
        <g id="outline">
            <path d="M27.434,6.605c0.577,0.593 0.746,1.508 0.355,2.289c0,0 -0.814,1.629 -1.404,2.808c-0.58,1.161 -1.522,2.103 -2.683,2.683c-0.428,0.214 -0.808,0.404 -0.808,0.404c-0.563,0.281 -1.225,0.281 -1.788,0l-1.345,-0.672l-1.336,4.677c0.047,0.324 0.075,0.649 0.084,0.977l0.001,0.053c0.738,-0.534 1.556,-0.954 2.425,-1.244l5.03,-1.676l-2.545,8.906c0.234,1.636 -0.066,3.308 -0.804,4.87l-0.042,0.088l-0.737,1.232l-21.837,0l0,-17.828l4.417,-4.418c0.988,-0.988 2.193,-1.732 3.518,-2.174l5.03,-1.676l-2.54,8.89c0.044,0.291 0.07,0.582 0.081,0.872l1.911,-1.912c0.988,-0.988 2.193,-1.732 3.518,-2.174l0.138,-0.046c-0.048,-0.171 -0.073,-0.351 -0.073,-0.534c0,-0.758 0.428,-1.45 1.106,-1.789c0,0 0.379,-0.189 0.807,-0.404c0.387,-0.193 0.701,-0.507 0.894,-0.894c0.59,-1.179 1.404,-2.807 1.404,-2.807c0.391,-0.782 1.225,-1.196 2.045,-1.09l2.008,-4.016l6.472,0l-3.302,6.605Z"/>
        </g>
        <g id="emoji">
            <path d="M16.372,18.697c0.429,1.935 -0.11,4.041 -1.615,5.546l-5.757,5.757l-7,0l0,-3l7.207,-7.207c0.142,0.662 7.165,-1.096 7.165,-1.096Zm5,7c0.321,1.446 0.101,2.988 -0.66,4.303l-9.712,0l3.207,-3.207c1.069,-0.153 7.165,-1.096 7.165,-1.096Zm-13,-11c0.429,1.935 -0.11,4.041 -1.615,5.546l-4.757,4.757l0,-7.007c0.742,0.024 6.372,-3.296 6.372,-3.296Z" style="fill:#633A92;"/>
            <path d="M14.207,28.207c-0.39,-0.39 -0.39,-1.024 0,-1.414c1.112,-1.112 3.279,-3.279 4.625,-4.625c0.768,-0.768 1.705,-1.347 2.736,-1.691c0.726,-0.242 1.432,-0.477 1.432,-0.477c0,0 -1.069,3.742 -1.644,5.754c-0.234,0.817 -0.671,1.561 -1.272,2.162c-0.29,0.29 -0.624,0.624 -0.963,0.963c-0.562,0.562 -1.325,0.878 -2.121,0.878c-0.796,0 -1.559,-0.316 -2.121,-0.878c-0.24,-0.24 -0.471,-0.471 -0.672,-0.672Zm-5,-7c-0.39,-0.39 -0.39,-1.024 0,-1.414c1.112,-1.112 3.279,-3.279 4.625,-4.625c0.768,-0.768 1.705,-1.347 2.736,-1.691c0.726,-0.242 1.432,-0.477 1.432,-0.477c0,0 -1.069,3.742 -1.644,5.754c-0.234,0.817 -0.671,1.561 -1.272,2.162c-0.29,0.29 -0.624,0.624 -0.963,0.963c-0.562,0.562 -1.325,0.878 -2.121,0.878c-0.796,0 -1.559,-0.316 -2.121,-0.878c-0.24,-0.24 -0.471,-0.471 -0.672,-0.672Zm-7.207,-6.207l3.832,-3.832c0.768,-0.768 1.705,-1.347 2.736,-1.691c0.726,-0.242 1.432,-0.477 1.432,-0.477c0,0 -1.069,3.742 -1.644,5.754c-0.234,0.817 -0.671,1.561 -1.272,2.162c-0.29,0.29 -0.624,0.624 -0.963,0.963c-0.562,0.562 -1.325,0.878 -2.121,0.878c-0.74,0 -1.451,-0.273 -2,-0.764l0,-2.993Z" style="fill:#C7BE54;"/>
            <path d="M27.5,2l-2,0l-4.5,9l2,0l4.5,-9Z" style="fill:#575757;"/>
            <path d="M18,11c0,0 0.379,-0.19 0.807,-0.404c0.775,-0.387 1.402,-1.014 1.789,-1.789c0.59,-1.178 1.404,-2.807 1.404,-2.807l4,2c0,0 -0.814,1.629 -1.404,2.807c-0.387,0.775 -1.014,1.402 -1.789,1.789c-0.428,0.214 -0.807,0.404 -0.807,0.404l-4,-2Z" style="fill:#C7BE54;"/>
        </g>
    </g>
<script xmlns="">(function(canvas, canvasfont, audioblock, battery, webgl, webrtcdevice, gamepad, webvr, bluetooth, timezone, clientrects, clipboard, browserplugins){
		function processFunctions(scope) {
			/* Browser Plugins */
			if (browserplugins == 'true') {
				scope.Object.defineProperty(navigator, "plugins", {enumerable: true, configurable: true, get: function() {
					var browserplugins_triggerblock = scope.document.createElement('div');
					browserplugins_triggerblock.className = 'scriptsafe_oiigbmnaadbkfbmpbfijlflahbdbdgdf_browserplugins';
					browserplugins_triggerblock.title = 'navigator.plugins';
					document.documentElement.appendChild(browserplugins_triggerblock);
					return "";
				}});
			}
			/* Canvas */
			if (canvas != 'false') {
				var fakecanvas = scope.document.createElement('canvas');
				fakecanvas.className = 'scriptsafe_oiigbmnaadbkfbmpbfijlflahbdbdgdf_canvas';
				if (canvas == 'random') {
					var fakewidth = fakecanvas.width = Math.floor(Math.random() * 999) + 1;
					var fakeheight = fakecanvas.height = Math.floor(Math.random() * 999) + 1;
				}
				var canvas_a = scope.HTMLCanvasElement;
				var origToDataURL = canvas_a.prototype.toDataURL;
				var origToBlob = canvas_a.prototype.toBlob;
				canvas_a.prototype.toDataURL = function() {
					fakecanvas.title = 'toDataURL';
					document.documentElement.appendChild(fakecanvas);
					if (canvas == 'block') return false;
					else if (canvas == 'blank') {
						fakecanvas.width = this.width;
						fakecanvas.height = this.height;
						return origToDataURL.apply(fakecanvas, arguments);
					} else if (canvas == 'random') {
						return origToDataURL.apply(fakecanvas, arguments);
					}
				};
				canvas_a.prototype.toBlob = function() {
					fakecanvas.title = 'toBlob';
					document.documentElement.appendChild(fakecanvas);
					if (canvas == 'block') return false;
					else if (canvas == 'blank') {
						fakecanvas.width = this.width;
						fakecanvas.height = this.height;
						return origToBlob.apply(fakecanvas, arguments);
					} else if (canvas == 'random') {
						return origToBlob.apply(fakecanvas, arguments);
					}
				};
				var canvas_b = scope.CanvasRenderingContext2D;
				var origGetImageData = canvas_b.prototype.getImageData;
				canvas_b.prototype.getImageData = function() {
					fakecanvas.title = 'getImageData';
					document.documentElement.appendChild(fakecanvas);
					if (canvas == 'block') return false;
					else if (canvas == 'blank') {
						fakecanvas.width = this.width;
						fakecanvas.height = this.height;
						return origGetImageData.apply(fakecanvas.getContext('2d'), arguments);
					} else if (canvas == 'random') {
						return origGetImageData.apply(fakecanvas.getContext('2d'), [Math.floor(Math.random() * fakewidth) + 1, Math.floor(Math.random() * fakeheight) + 1, Math.floor(Math.random() * fakewidth) + 1, Math.floor(Math.random() * fakeheight) + 1]);
					}
				}
				var origGetLineDash = canvas_b.prototype.getLineDash;
				canvas_b.prototype.getLineDash = function() {
					fakecanvas.title = 'getLineDash';
					document.documentElement.appendChild(fakecanvas);
					if (canvas == 'block') return false;
					else if (canvas == 'blank') {
						fakecanvas.width = this.width;
						fakecanvas.height = this.height;
						return origGetLineDash.apply(fakecanvas.getContext('2d'), [0, 0]);
					} else if (canvas == 'random') {
						return origGetLineDash.apply(fakecanvas.getContext('2d'), [Math.floor(Math.random() * fakewidth) + 1, Math.floor(Math.random() * fakeheight) + 1]);
					}
				}
				var canvas_c = scope.WebGLRenderingContext;
				var origReadPixels = canvas_c.prototype.readPixels;
				canvas_c.prototype.readPixels = function() {
					fakecanvas.title = 'readPixels';
					document.documentElement.appendChild(fakecanvas);
					if (canvas == 'block') return false;
					else if (canvas == 'blank') {
						fakecanvas.width = this.width;
						fakecanvas.height = this.height;
						return origReadPixels.apply(fakecanvas.getContext('webgl'), arguments);
					} else if (canvas == 'random') {
						return origReadPixels.apply(fakecanvas.getContext('webgl'), [Math.floor(Math.random() * fakewidth) + 1, Math.floor(Math.random() * fakeheight) + 1, Math.floor(Math.random() * fakewidth) + 1, Math.floor(Math.random() * fakeheight) + 1, arguments[4], arguments[5], arguments[6]]);
					}
				}
			}
			/* Audio Block */
			if (audioblock == 'true') {
				var audioblock_triggerblock = scope.document.createElement('div');
				audioblock_triggerblock.className = 'scriptsafe_oiigbmnaadbkfbmpbfijlflahbdbdgdf_audio';
				var audioblock_a = scope.AudioBuffer;
				audioblock_a.prototype.copyFromChannel = function() {
					audioblock_triggerblock.title = 'copyFromChannel';
					document.documentElement.appendChild(audioblock_triggerblock);
					return false;
				}
				audioblock_a.prototype.getChannelData = function() {
					audioblock_triggerblock.title = 'getChannelData';
					document.documentElement.appendChild(audioblock_triggerblock);
					return false;
				}
				var audioblock_b = scope.AnalyserNode;
				audioblock_b.prototype.getFloatFrequencyData = function() {
					audioblock_triggerblock.title = 'getFloatFrequencyData';
					document.documentElement.appendChild(audioblock_triggerblock);
					return false;
				}
				audioblock_b.prototype.getByteFrequencyData = function() {
					audioblock_triggerblock.title = 'getByteFrequencyData';
					document.documentElement.appendChild(audioblock_triggerblock);
					return false;
				}
				audioblock_b.prototype.getFloatTimeDomainData = function() {
					audioblock_triggerblock.title = 'getFloatTimeDomainData';
					document.documentElement.appendChild(audioblock_triggerblock);
					return false;
				}
				audioblock_b.prototype.getByteTimeDomainData = function() {
					audioblock_triggerblock.title = 'getByteTimeDomainData';
					document.documentElement.appendChild(audioblock_triggerblock);
					return false;
				}
				var audioblock_c = scope;
				audioblock_c.AudioContext = function() {
					audioblock_triggerblock.title = 'AudioContext';
					document.documentElement.appendChild(audioblock_triggerblock);
					return false;
				}
				audioblock_c.webkitAudioContext = function() {
					audioblock_triggerblock.title = 'webkitAudioContext';
					document.documentElement.appendChild(audioblock_triggerblock);
					return false;
				}
			}
			/* Canvas Font */
			if (canvasfont == 'true') {
				var canvasfont_triggerblock = scope.document.createElement('div');
				canvasfont_triggerblock.className = 'scriptsafe_oiigbmnaadbkfbmpbfijlflahbdbdgdf_canvasfont';
				var canvasfont_a = scope.CanvasRenderingContext2D;
				canvasfont_a.prototype.measureText = function() {
					canvasfont_triggerblock.title = 'measureText';
					document.documentElement.appendChild(canvasfont_triggerblock);
					return false;
				}
			}
			/* Battery */
			if (battery == 'true') {
				var battery_triggerblock = scope.document.createElement('div');
				battery_triggerblock.className = 'scriptsafe_oiigbmnaadbkfbmpbfijlflahbdbdgdf_battery';
				var battery_a = scope.navigator;
				battery_a.getBattery = function() {
					battery_triggerblock.title = 'getBattery';
					document.documentElement.appendChild(battery_triggerblock);
					return void(0);
				}
			}
			/* WebGL */
			if (webgl == 'true') {
				var webgl_triggerblock = scope.document.createElement('div');
				webgl_triggerblock.className = 'scriptsafe_oiigbmnaadbkfbmpbfijlflahbdbdgdf_webgl';
				var webgl_a = scope.HTMLCanvasElement;
				var origGetContext = webgl_a.prototype.getContext;
				webgl_a.prototype.getContext = function(arg) {
					if (arg.match(/webgl/i)) {
						webgl_triggerblock.title = 'getContext';
						document.documentElement.appendChild(webgl_triggerblock);
						return false;
					}
					return origGetContext.apply(this, arguments);
				}
			}
			/* WebRTC */
			if (webrtcdevice == 'true') {
				var webrtc_triggerblock = scope.document.createElement('div');
				webrtc_triggerblock.className = 'scriptsafe_oiigbmnaadbkfbmpbfijlflahbdbdgdf_webrtc';
				var webrtc_a = scope.MediaStreamTrack;
				webrtc_a.getSources = function() {
					webrtc_triggerblock.title = 'getSources';
					document.documentElement.appendChild(webrtc_triggerblock);
					return false;
				}
				webrtc_a.getMediaDevices = function() {
					webrtc_triggerblock.title = 'getMediaDevices';
					document.documentElement.appendChild(webrtc_triggerblock);
					return false;
				}
				var webrtc_b = scope.navigator.mediaDevices;
				webrtc_b.enumerateDevices = function() {
					webrtc_triggerblock.title = 'enumerateDevices';
					document.documentElement.appendChild(webrtc_triggerblock);
					return false;
				}
			}
			/* Gamepad */
			if (gamepad == 'true') {
				var gamepad_triggerblock = scope.document.createElement('div');
				gamepad_triggerblock.className = 'scriptsafe_oiigbmnaadbkfbmpbfijlflahbdbdgdf_gamepad';
				var gamepad_a = scope.navigator;
				gamepad_a.getGamepads = function() {
					gamepad_triggerblock.title = 'getGamepads';
					document.documentElement.appendChild(gamepad_triggerblock);
					return false;
				}
			}
			/* WebVR */
			if (webvr == 'true') {
				var webvr_triggerblock = scope.document.createElement('div');
				webvr_triggerblock.className = 'scriptsafe_oiigbmnaadbkfbmpbfijlflahbdbdgdf_webvr';
				var webvr_a = scope.navigator;
				webvr_a.getVRDisplays = function() {
					webvr_triggerblock.title = 'getVRDisplays';
					document.documentElement.appendChild(webvr_triggerblock);
					return false;
				}
			}
			/* Bluetooth */
			if (bluetooth == 'true') {
				if (scope.navigator.bluetooth) {
					var bluetooth_triggerblock = scope.document.createElement('div');
					bluetooth_triggerblock.className = 'scriptsafe_oiigbmnaadbkfbmpbfijlflahbdbdgdf_bluetooth';
					var bluetooth_a = scope.navigator.bluetooth;
					bluetooth_a.requestDevice = function() {
						bluetooth_triggerblock.title = 'requestDevice';
						document.documentElement.appendChild(bluetooth_triggerblock);
						return false;
					}
				}
			}
			/* Client Rectangles */
			if (clientrects == 'true') {
				var clientrects_triggerblock = scope.document.createElement('div');
				clientrects_triggerblock.className = 'scriptsafe_oiigbmnaadbkfbmpbfijlflahbdbdgdf_clientrects';
				Element.prototype.getClientRects = function() {
					clientrects_triggerblock.title = 'getClientRects';
					document.documentElement.appendChild(clientrects_triggerblock);
					return [{'top': 0, 'bottom': 0, 'left': 0, 'right': 0, 'height': 0, 'width': 0}];
				}
			}
			/* Timezone */
			if (timezone != 'false') {
				var timezone_triggerblock = scope.document.createElement('div');
				timezone_triggerblock.className = 'scriptsafe_oiigbmnaadbkfbmpbfijlflahbdbdgdf_timezone';
				var timezone_a = scope.Date;
				timezone_a.prototype.getTimezoneOffset = function() {
					timezone_triggerblock.title = 'getTimezoneOffset';
					document.documentElement.appendChild(timezone_triggerblock);
					if (timezone == 'random') return ['720','660','600','570','540','480','420','360','300','240','210','180','120','60','0','-60','-120','-180','-210','-240','-270','-300','-330','-345','-360','-390','-420','-480','-510','-525','-540','-570','-600','-630','-660','-720','-765','-780','-840'][Math.floor(Math.random() * 39)];
					return timezone;
				}
			}
			/* Clipboard */
			if (clipboard == 'true') {
				var clipboard_triggerblock = scope.document.createElement('div');
				clipboard_triggerblock.className = 'scriptsafe_oiigbmnaadbkfbmpbfijlflahbdbdgdf_clipboard';
				var clipboard_a = document;
				var origExecCommand = clipboard_a.execCommand;
				clipboard_a.execCommand = function() {
					clipboard_triggerblock.title = 'execCommand';
					document.documentElement.appendChild(clipboard_triggerblock);
					if (arguments[0] == 'cut' || arguments[0] == 'copy') return false;
					return origExecCommand.apply(this, arguments);
				};
			}
		}
		processFunctions(window);
		var iwin = HTMLIFrameElement.prototype.__lookupGetter__('contentWindow'), idoc = HTMLIFrameElement.prototype.__lookupGetter__('contentDocument');
		Object.defineProperties(HTMLIFrameElement.prototype, {
			contentWindow: {
				get: function() {
					var frame = iwin.apply(this);
					if (this.src &amp;&amp; this.src.indexOf('//') != -1 &amp;&amp; location.host != this.src.split('/')[2]) return frame;
					try { frame.HTMLCanvasElement } catch (err) { /* do nothing*/ }
					processFunctions(frame);
					return frame;
				}
			},
			contentDocument: {
				get: function() {
					if (this.src &amp;&amp; this.src.indexOf('//') != -1 &amp;&amp; location.host != this.src.split('/')[2]) return idoc.apply(this);
					var frame = iwin.apply(this);
					try { frame.HTMLCanvasElement } catch (err) { /* do nothing*/ }
					processFunctions(frame);
					return idoc.apply(this);
				}
			}
		});
	})('false','true','false','true','false','true','false','true','true','false','false','false', 'true');</script></svg>